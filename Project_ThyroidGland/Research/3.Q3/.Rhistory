max(signif$padj, na.rm = TRUE)
signif
upreg = signif
#Some values are NA:
upreg$pvalue[is.na(upreg$log2FoldChange)] = 0
upreg = upreg[upreg$log2FoldChange > 0,]
upreg
hist(upreg$log2FoldChange)
hist(log10(upreg$log2FoldChange + 1))
hist(upreg$log2FoldChange)
hist(log10(upreg$log2FoldChange + 1))
max(upreg$log2FoldChange)
upreg = upreg[order(-upreg$log2FoldChange),]
upreg[1:10,]
summary(upreg)
summary(res)
upreg[1:10,]
summary(res)
summary(upreg)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(corrplot)
library(grid)
library(gridExtra)
library(caret)
library(backports)
library(DESeq2)
library(EBImage)
p_value = .05
morphological_counts = read_tsv("D:/Polytech/MA2 2023-2024/Q2/Genomics/Project_ThyroidGland/Data_ThyroidGland/OG/morphological_counts_lunit_dino.tsv")
coldata = morphological_counts
RNA_read = read_tsv("D:/Polytech/MA2 2023-2024/Q2/Genomics/Project_ThyroidGland/Data_ThyroidGland/OG/RNA_read_counts.tsv")
clinical = read_tsv("D:/Polytech/MA2 2023-2024/Q2/Genomics/Project_ThyroidGland/Data_ThyroidGland/OG/clinical_data.tsv")
coldata = coldata %>% left_join(by = "SMPLID", y = clinical)
rownames(RNA_read) = RNA_read$Name
df = RNA_read %>% select_if(is.numeric)
rownames(df) = RNA_read$Name
maxs = apply(df,1, function(var) max(var, na.rm = TRUE))
hist(maxs)
hist(log10(maxs + 1))
median = apply(df,1, function(var) median(var, na.rm = TRUE))
hist(log10(median + 1))
hist(log10(median))
otsu_modified = function(array){
return (otsu(as.matrix(array, nrow = 2),
range = c(min(med_avg, na.rm = TRUE), max(med_avg, na.rm = TRUE)),
levels = 10) )
}
med_avg = apply(df,1, function(var) mad(var, na.rm = TRUE))
tmp = otsu_modified(med_avg)
hist(log10(med_avg + 1))
hist(log10(med_avg))
abline(v = tmp, col = "red")
hist(log10(med_avg + 1))
abline(v = tmp, col = "red")
hist(log10(med_avg)
hist(log10(med_avg + 1))
med_avg = apply(df,1, function(var) mad(var, na.rm = TRUE))
tmp = otsu_modified(med_avg)
hist(log10(med_avg + 1))
abline(v = log10(tmp + 1), col = "red")
hist(log10(med_avg))
sum(log10(med_avg +1 ) > 5)
median = apply(df,1, function(var) median(var, na.rm = TRUE))
hist(log10(median + 1))
hist(log10(median))
maxs = apply(df,1, function(var) max(var, na.rm = TRUE))
hist(maxs)
hist(log10(maxs + 1))
sum(log10(median +1 ) > 4)
sum(log10(median +1 ) < 4)
otsu_modified = function(array){
# Find the 100 largest values, and remove them (outliers)
array <- sort(array)
array <- array[1:(length(array) - 100)]
# Compute the threshold
return (otsu(as.matrix(array, nrow = 2),
range = c(min(med_avg, na.rm = TRUE), max(med_avg, na.rm = TRUE)),
levels = 10) )
}
median = apply(df,1, function(var) median(var, na.rm = TRUE))
tmp = otsu_modified(median)
hist(log10(median + 1))
abline(v = log10(tmp + 1), col = "red")
hist(log10(median))
otsu_modified = function(array){
# Find the 100 largest values, and remove them (outliers)
array <- sort(array)
array <- array[1:(length(array) - 0.05 * length(array))]
# Compute the threshold
return (otsu(as.matrix(array, nrow = 2),
range = c(min(med_avg, na.rm = TRUE), max(med_avg, na.rm = TRUE)),
levels = 10) )
}
median = apply(df,1, function(var) median(var, na.rm = TRUE))
tmp = otsu_modified(median)
hist(log10(median + 1))
abline(v = log10(tmp + 1), col = "red")
hist(log10(median))
otsu_modified = function(array){
# Find the 5% largest values, and remove them (outliers)
array <- sort(array)
array <- array[1:(length(array) - 0.05 * length(array))]
# Compute the threshold
return (otsu(as.matrix(array, nrow = 2),
range = c(min(med_avg, na.rm = TRUE), max(med_avg, na.rm = TRUE)),
levels = 10) )
}
med_avg = apply(df,1, function(var) mad(var, na.rm = TRUE))
tmp = otsu_modified(med_avg)
hist(log10(med_avg + 1))
abline(v = log10(tmp + 1), col = "red")
hist(log10(med_avg))
otsu_modified = function(array){
max(array, na.rm = TRUE)
# Find the 5% largest values, and remove them (outliers)
array <- sort(array)
array <- array[1:(length(array) - 0.05 * length(array))]
max(array, na.rm = TRUE)
# Compute the threshold
return (otsu(as.matrix(array, nrow = 2),
range = c(min(med_avg, na.rm = TRUE), max(med_avg, na.rm = TRUE)),
levels = 10) )
}
median = apply(df,1, function(var) median(var, na.rm = TRUE))
tmp = otsu_modified(median)
hist(log10(median + 1))
abline(v = log10(tmp + 1), col = "red")
hist(log10(median))
otsu_modified = function(array){
print(max(array, na.rm = TRUE))
# Find the 5% largest values, and remove them (outliers)
array <- sort(array)
array <- array[1:(length(array) - 0.05 * length(array))]
print(max(array, na.rm = TRUE))
# Compute the threshold
return (otsu(as.matrix(array, nrow = 2),
range = c(min(med_avg, na.rm = TRUE), max(med_avg, na.rm = TRUE)),
levels = 10) )
}
median = apply(df,1, function(var) median(var, na.rm = TRUE))
tmp = otsu_modified(median)
hist(log10(median + 1))
abline(v = log10(tmp + 1), col = "red")
hist(log10(median))
log10(4257)
otsu_modified = function(array){
print(max(array, na.rm = TRUE))
# Find the 5% largest values, and remove them (outliers)
array <- sort(array)
array <- array[1:(length(array) - 0.5 * length(array))]
print(max(array, na.rm = TRUE))
# Compute the threshold
return (otsu(as.matrix(array, nrow = 2),
range = c(min(med_avg, na.rm = TRUE), max(med_avg, na.rm = TRUE)),
levels = 10) )
}
median = apply(df,1, function(var) median(var, na.rm = TRUE))
tmp = otsu_modified(median)
hist(log10(median + 1))
abline(v = log10(tmp + 1), col = "red")
hist(log10(median))
tmp
array = median
print(max(array, na.rm = TRUE))
# Find the 5% largest values, and remove them (outliers)
array <- sort(array)
array <- array[1:(length(array) - 0.5 * length(array))]
print(max(array, na.rm = TRUE))
print(max(array, na.rm = TRUE))
array[1:100]
array[10000:10100]
otsu(as.matrix(array, nrow = 2),
range = c(min(array, na.rm = TRUE), max(array, na.rm = TRUE)),
levels = 10)
otsu_modified = function(array){
print(max(array, na.rm = TRUE))
# Find the 5% largest values, and remove them (outliers)
array <- sort(array)
array <- array[1:(length(array) - 0.05 * length(array))]
print(max(array, na.rm = TRUE))
# Compute the threshold
return (otsu(as.matrix(array, nrow = 2),
range = c(min(array, na.rm = TRUE), max(array, na.rm = TRUE)),
levels = 10) )
}
median = apply(df,1, function(var) median(var, na.rm = TRUE))
tmp = otsu_modified(median)
hist(log10(median + 1))
abline(v = log10(tmp + 1), col = "red")
hist(log10(median))
hist(log10(median + 1), bins = 20)
otsu_modified = function(array){
print(max(array, na.rm = TRUE))
# Find the 5% largest values, and remove them (outliers)
array <- sort(array)
array <- array[1:(length(array) - 0.1 * length(array))]
print(max(array, na.rm = TRUE))
# Compute the threshold
return (otsu(as.matrix(array, nrow = 2),
range = c(min(array, na.rm = TRUE), max(array, na.rm = TRUE)),
levels = 10) )
}
median = apply(df,1, function(var) median(var, na.rm = TRUE))
tmp = otsu_modified(median)
hist(log10(median + 1))
abline(v = log10(tmp + 1), col = "red")
hist(log10(median))
med_avg = apply(df,1, function(var) mad(var, na.rm = TRUE))
tmp = otsu_modified(med_avg)
hist(log10(med_avg + 1))
abline(v = log10(tmp + 1), col = "red")
hist(log10(med_avg))
rm(array)
median = apply(df,1, function(var) median(var, na.rm = TRUE))
tmp = otsu_modified(median)
hist(log10(median + 1))
abline(v = log10(tmp + 1), col = "red")
hist(log10(median))
med_avg = apply(df,1, function(var) mad(var, na.rm = TRUE))
tmp = otsu_modified(med_avg)
hist(log10(med_avg + 1))
abline(v = log10(tmp + 1), col = "red")
hist(log10(med_avg))
otsu_modified = function(array){
print(max(array, na.rm = TRUE))
# Find the 5% largest values, and remove them (outliers)
array <- sort(array)
array <- array[1:(length(array) - 0.15 * length(array))]
print(max(array, na.rm = TRUE))
# Compute the threshold
return (otsu(as.matrix(array, nrow = 2),
range = c(min(array, na.rm = TRUE), max(array, na.rm = TRUE)),
levels = 10) )
}
median = apply(df,1, function(var) median(var, na.rm = TRUE))
tmp = otsu_modified(median)
hist(log10(median + 1))
abline(v = log10(tmp + 1), col = "red")
hist(log10(median))
median = apply(df,1, function(var) median(var, na.rm = TRUE))
tmp = otsu_modified(median)
hist(log10(median + 1), breaks = 256)
abline(v = log10(tmp + 1), col = "red")
hist(log10(median))
median = apply(df,1, function(var) median(var, na.rm = TRUE))
tmp = otsu_modified(median)
hist(log10(median + 1), breaks = 20)
abline(v = log10(tmp + 1), col = "red")
hist(log10(median))
median = apply(df,1, function(var) median(var, na.rm = TRUE))
tmp = otsu_modified(median)
hist(log10(median + 1), breaks = 10)
abline(v = log10(tmp + 1), col = "red")
hist(log10(median))
median = apply(df,1, function(var) median(var, na.rm = TRUE))
tmp = otsu_modified(median)
hist(log10(median + 1), breaks = 30)
abline(v = log10(tmp + 1), col = "red")
hist(log10(median))
discrete = 20
# Example data
numeric_data <- c(1, 3, 5, 7, 9, 11, 13, 15)  # Replace this with your numeric data
# Define the number of bins
N <- 3
# Discretize the numeric data into N bins
discretized_data <- cut(numeric_data, breaks = N)
# View the discretized data
print(discretized_data)
numeric_data <- c(1, 3, 5, 7, 9, 11, 13, 15)  # Replace this with your numeric data
# Define the number of bins
N <- 3
# Discretize the numeric data into N bins with numeric labels
discretized_data <- cut(numeric_data, breaks = N, labels = FALSE)
# View the discretized data
print(discretized_data)
otsu_modified = function(array){
# Find the 5% largest values, and remove them (outliers)
array <- sort(array)
array <- array[1:(length(array) - 0.05 * length(array))]
# Discretise data for otsu method
# Compute the threshold
return (otsu(log10(as.matrix(array, nrow = 2) + 1),
range = c(min(array, na.rm = TRUE), max(array, na.rm = TRUE)),
levels = discrete) )
}
median = apply(df,1, function(var) median(var, na.rm = TRUE))
tmp = otsu_modified(median)
hist(log10(median + 1), breaks = discrete)
abline(v = log10(tmp + 1), col = "red")
hist(log10(median))
med_avg = apply(df,1, function(var) mad(var, na.rm = TRUE))
tmp = otsu_modified(med_avg)
hist(log10(med_avg + 1), breaks = discrete)
abline(v = log10(tmp + 1), col = "red")
hist(log10(med_avg))
med_avg = apply(df,1, function(var) mad(var, na.rm = TRUE))
thr_avg = otsu_modified(med_avg)
hist(log10(med_avg + 1), breaks = discrete)
abline(v = log10(tmp + 1), col = "red")
hist(log10(med_avg))
median = apply(df,1, function(var) median(var, na.rm = TRUE))
thr_median = otsu_modified(median)
hist(log10(median + 1), breaks = discrete)
abline(v = log10(tmp + 1), col = "red")
hist(log10(median))
hist(log10(median + 1), breaks = discrete)
abline(v = log10(tmp + 1), col = "red")
hist(log10(med_avg + 1), breaks = discrete)
abline(v = log10(tmp + 1), col = "red")
high_mad = med_avg > thr_avg
high_expr = median > thr_median
cond = (high_mad & high_expr)
print(sum(cond))
cts = df[cond, ]
rownames(cts) = rownames(df)[cond]
rownames(coldata) = coldata$SMPLID
#Checking if coldata is fine:
all(colnames(cts) %in% rownames(coldata))
#Checking if same order:
all(colnames(cts) == rownames(coldata))
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ Mophological.cluster.G4_0 + Mophological.cluster.G4_23)
dds <- DESeq(dds)
varname = c(Mophological.cluster.G4_0)
varname = c("Mophological.cluster.G4_0", )
varname = c("Mophological.cluster.G4_0" )
for(var in varname){
print(var)
}
covar = c("Mophological.cluster.G4_23", "AGE")
eq_cov = paste(covar, sep = "+")
eq_cov
eq_cov = paste0(covar, sep = "+")
eq_cov
paste("~", var)
eq_cov = paste0(covar, collapse = "+")
eq_cov
eq_cov = paste0(covar, collapse = " + ")
eq_cov
paste(start, eq_cov, sep =" + ")
paste(start, eq_cov, collapse =" + ")
start = paste("~", var )
start
eq_cov
paste(start, eq_cov, collapse =" + ")
varname = c("Mophological.cluster.G4_0" )
covar = c("Mophological.cluster.G4_23", "AGE")
eq_cov = paste0(covar, collapse = " + ")
for(var in varname){
print(var)
start = paste("~", var )
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = as.formula(paste(start, eq_cov, collapse =" + ")))
dds <- DESeq(dds)
res[var] = results(dds, alpha = p_value)
}
design = as.formula(paste(start, eq_cov, collapse =" + "))
paste(start, eq_cov, collapse =" + ")
paste(start, eq_cov, sep =" + ")
design = as.formula(paste(start, eq_cov, sep =" + "))
varname = c("Mophological.cluster.G4_0" )
covar = c("Mophological.cluster.G4_23", "AGE")
eq_cov = paste0(covar, collapse = " + ")
for(var in varname){
print(var)
start = paste("~", var )
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = as.formula(paste(start, eq_cov, sep =" + ")))
dds <- DESeq(dds)
res[var] = results(dds, alpha = p_value)
}
res = c()
res[var] = results(dds, alpha = p_value)
res[var] = list(results(dds, alpha = p_value))
View(res)
signif = res[var]
#Some values are NA:
signif$padj[is.na(signif$padj)] = 0.555555555555
signif = signif[signif$padj < p_value,]
signif = res[[var]]
#Some values are NA:
signif$padj[is.na(signif$padj)] = 0.555555555555
signif = signif[signif$padj < p_value,]
upreg = signif
#Some values are NA:
upreg$pvalue[is.na(upreg$log2FoldChange)] = 0
upreg = upreg[upreg$log2FoldChange > 0,]
hist(upreg$log2FoldChange)
hist(log10(upreg$log2FoldChange + 1))
max(upreg$log2FoldChange)
upreg = upreg[order(-upreg$log2FoldChange),]
upreg[1:10,]
summary(res)
summary(upreg)
for(var in varname){
# Select significant regulations
signif = res[[var]]
#Some values are NA:
signif$padj[is.na(signif$padj)] = 0.555555555555
signif = signif[signif$padj < p_value,]
#Select up-regulations
upreg = signif
#Some values are NA:
upreg$pvalue[is.na(upreg$log2FoldChange)] = 0
upreg = upreg[upreg$log2FoldChange > 0,]
hist(upreg$log2FoldChange, title(paste("log2FoldChange of", sep = " ", var)))
# Order the dataframe, objective is to have the max values at the top
max(upreg$log2FoldChange)
upreg = upreg[order(-upreg$log2FoldChange),]
print("The ten most significant up-regulated genes are:")
upreg[1:10,]
summary(res)
summary(upreg)
plotMA(res[[var]])
plotMA(upreg)
}
for(var in varname){
# Select significant regulations
signif = res[[var]]
#Some values are NA:
signif$padj[is.na(signif$padj)] = 0.555555555555
signif = signif[signif$padj < p_value,]
#Select up-regulations
upreg = signif
#Some values are NA:
upreg$pvalue[is.na(upreg$log2FoldChange)] = 0
upreg = upreg[upreg$log2FoldChange > 0,]
hist(upreg$log2FoldChange)
title(paste("log2FoldChange of", sep = " ", var))
# Order the dataframe, objective is to have the max values at the top
max(upreg$log2FoldChange)
upreg = upreg[order(-upreg$log2FoldChange),]
print("The ten most significant up-regulated genes are:")
upreg[1:10,]
summary(res)
summary(upreg)
plotMA(res[[var]])
plotMA(upreg)
}
for(var in varname){
# Select significant regulations
signif = res[[var]]
#Some values are NA:
signif$padj[is.na(signif$padj)] = 0.555555555555
signif = signif[signif$padj < p_value,]
#Select up-regulations
upreg = signif
#Some values are NA:
upreg$pvalue[is.na(upreg$log2FoldChange)] = 0
upreg = upreg[upreg$log2FoldChange > 0,]
hist(upreg$log2FoldChange, main = paste("log2FoldChange of", sep = " ", var))
# Order the dataframe, objective is to have the max values at the top
max(upreg$log2FoldChange)
upreg = upreg[order(-upreg$log2FoldChange),]
print("The ten most significant up-regulated genes are:")
upreg[1:10,]
summary(res[[var]])
summary(upreg)
plotMA(res[[var]])
plotMA(upreg)
}
for(var in varname){
# Select significant regulations
signif = res[[var]]
#Some values are NA:
signif$padj[is.na(signif$padj)] = 0.555555555555
signif = signif[signif$padj < p_value,]
#Select up-regulations
upreg = signif
#Some values are NA:
upreg$pvalue[is.na(upreg$log2FoldChange)] = 0
upreg = upreg[upreg$log2FoldChange > 0,]
hist(upreg$log2FoldChange, main = paste("log2FoldChange of", sep = " ", var))
# Order the dataframe, objective is to have the max values at the top
max(upreg$log2FoldChange)
upreg = upreg[order(-upreg$log2FoldChange),]
print("The ten most significant up-regulated genes are:")
upreg[1:10,]
summary(res[[var]])
summary(upreg)
plotMA(res[[var]], main = paste("log2FoldChange of", sep = " ", var))
plotMA(upreg)
}
for(var in varname){
# Select significant regulations
signif = res[[var]]
#Some values are NA:
signif$padj[is.na(signif$padj)] = 0.555555555555
signif = signif[signif$padj < p_value,]
#Select up-regulations
upreg = signif
#Some values are NA:
upreg$pvalue[is.na(upreg$log2FoldChange)] = 0
upreg = upreg[upreg$log2FoldChange > 0,]
hist(upreg$log2FoldChange, main = paste("log2FoldChange of", sep = " ", var))
# Order the dataframe, objective is to have the max values at the top
max(upreg$log2FoldChange)
upreg = upreg[order(-upreg$log2FoldChange),]
print("The ten most significant up-regulated genes are:")
upreg[1:10,]
summary(res[[var]])
summary(upreg)
plotMA(res[[var]], main = paste("plotMA of", sep = " ", var))
plotMA(upreg, , main = paste("plotMA of up-regulated in", sep = " ", var))
}
res[[var]]
summary(upreg)
upreg
